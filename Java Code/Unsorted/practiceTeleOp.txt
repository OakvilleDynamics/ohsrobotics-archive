package com.qualcomm.ftcrobotcontroller.opmodes;

import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;

/**
 * TeleOp Mode
 * <p>
 * Enables control of the robot via the gamepad
 */
public class K9TankDrive extends OpMode {
    final static double ARM_MIN_RANGE  = 0.20;
    final static double ARM_MAX_RANGE  = 0.90;
    final static double CLAW_MIN_RANGE  = 0.20;
    final static double CLAW_MAX_RANGE  = 0.7;

	double armPosition;
	double armDelta = 0.1;
	double clawPosition;
	double clawDelta = 0.1;
	DcMotor motorRight;
	DcMotor motorLeft;
	Servo claw;
	Servo arm;
	public K9TankDrive() {

	}

	/*
	 * Code to run when the op mode is first enabled goes here
	 * 
	 * @see com.qualcomm.robotcore.eventloop.opmode.OpMode#start()
	 */
	@Override
	public void start() {
		/*
		 * Use the hardwareMap to get the dc motors and servos by name. Note
		 * that the names of the devices must match the names used when you
		 * configured your robot and created the configuration file.
		 */
		
		/*
		 * For the demo Tetrix K9 bot we assume the following,
		 *   There are two motors "motor_1" and "motor_2"
		 *   "motor_1" is on the right side of the bot.
		 *   "motor_2" is on the left side of the bot.
		 *   
		 * We also assume that there are two servos "servo_1" and "servo_6"
		 *    "servo_1" controls the arm joint of the manipulator.
		 *    "servo_6" controls the claw joint of the manipulator.
		 */
		motorRight = hardwareMap.dcMotor.get("motor_2");
		motorLeft = hardwareMap.dcMotor.get("motor_1");
		motorLeft.setDirection(DcMotor.Direction.REVERSE);
		
		armRight = hardwareMap.servo.get("servo_1");
		armLeft = hardwareMap.servo.get("servo_3");
		claw = hardwareMap.servo.get("servo_2");

		armRightPosition = 0.2;
		armLeftPosition = 179.8;
		clawPosition = 0.2;
	}

	@Override
	public void loop() {

        float left = -gamepad1.left_stick_y;
        float right = -gamepad1.right_stick_y;
		float pushArm = -gamepad2.right_stick_y;
		float pullArm = -gamepad2.left_stick_y;
		
		right = Range.clip(right, -1, 1);
		left = Range.clip(left, -1, 1);
		pushArm = Range.clip(pushArm, -1, 1);
		pullArm = Range.clip(pullArm, -1, 1);
		
		right = (float)scaleInput(right);
		left =  (float)scaleInput(left);
		pushArm = (float)scaleInput(pushArm);
		pullArm = (float)scaleInput(pullArm);
		
		motorRight.setPower(right);
		motorLeft.setPower(left);
		motorArmPush.setPower(pushArm);
		morotArmPull.setPower(pullArm);

		if (gamepad1.a) {
			armPositionRight += armDelta;
			armPositionLeft -= armDelta;
		}

		if (gamepad1.y) {
			// if the Y button is pushed on gamepad1, decrease the position of
			// the arm servo.
			armPositionRight -= armDelta;
			armPositionLeft += armDelta;
		}

		armRightPosition = Range.clip(armPositionRight, ARM_MIN_RANGE, ARM_MAX_RANGE);
		armLeftPosition = Range.clip(armPositionLeft, ARM_MIN_RANGE, ARM_MAX_RANGE);
		clawPosition = Range.clip(clawPosition, CLAW_MIN_RANGE, CLAW_MAX_RANGE);
		armRight.setPosition(armRightPosition);
		armLeft.setPosition(armLeftPosition);
		claw.setPosition(clawPosition);

		telemetry.addData("Text", "*** Robot Data***");
		telemetry.addData("left tgt pwr",  "left  pwr: " + String.format("%.2f", left));
		telemetry.addData("right tgt pwr", "right pwr: " + String.format("%.2f", right));
	}

	@Override
	public void stop() {

	}
	
	/*
	 * This method scales the joystick input so for low joystick values, the 
	 * scaled value is less than linear.  This is to make it easier to drive
	 * the robot more precisely at slower speeds.
	 */
	double scaleInput(double dVal)  {
		double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
				0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };
		
		// get the corresponding index for the scaleInput array.
		int index = (int) (dVal * 16.0);
		if (index < 0) {
			index = -index;
		} else if (index > 16) {
			index = 16;
		}
		
		double dScale = 0.0;
		if (dVal < 0) {
			dScale = -scaleArray[index];
		} else {
			dScale = scaleArray[index];
		}
		
		return dScale;
	}

}